<?php
// $Id$

/**
 * @file
 * Allows to use PHP in views.
 */

/**
 * Implements hook_views_api().
 */
function views_php_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Menu access callback function; use PHP code to determine whether a user as
 * access.
 */
function views_php_access($php_access, $view_name, $display_id, $account = NULL) {
  global $user;
  static $lamda_function = array();

  if (!isset($account)) {
    $account = $user;
  }

  if (!isset($lamda_function[$view_name . ':' . $display_id])) {
    $lamda_function[$view_name . ':' . $display_id] = create_function('$view_name, $display_id, $account', $php_access);
  }

  ob_start();
  $access = (bool) $lamda_function[$view_name . ':' . $display_id]($view_name, $display_id, $account);
  ob_end_clean();
  return $access;
}

/**
 * Helper function; only users with use PHP permission can provide input for given element.
 */
function views_php_check_access(&$element) {
  if (!user_access('use PHP for settings')) {
    $element['#disabled'] = TRUE;
    $element['#value'] = $element['#default_value'];
    $element['#description'] .= ' <strong>' . t('Note: you do not have permission to modify this.') . '</strong>';
  }
}

/**
 * Implements hook_views_pre_execute().
 */
function views_php_views_pre_execute($view) {
  // Seize control over the query plugin if a views handler requested so.
  if (!empty($view->views_php)) {
    $query = new views_php_plugin_query();
    $query->php_wrap($view->query);
  }
}

/**
 * Implements hook_views_post_execute().
 */
function views_php_views_post_execute($view) {
  // Restore original query plugin if it was wrapped.
  if ($view->query instanceof views_php_plugin_wrapper) {
    $view->query->php_unwrap();
  }
}
